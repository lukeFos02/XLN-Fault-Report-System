@inject IHttpContextAccessor contextAccessor
@{
    ViewData["Title"] = "Report A Fault";
    string options = contextAccessor.HttpContext.Session.GetString("ServiceType");
    string[] optionslist = options.Split(",");
    optionslist = optionslist.Where(s => s != optionslist[0]).ToArray();
}
<head>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
@using (Html.BeginForm("ErrorForm2", "ErrorForm", FormMethod.Post, new { onsubmit = "return validateDescription()" }))
{
    <div class="faultprogress">
        2/6
    </div>
    <div class="checkboxcontainer">
        <div class="float-container">
            <div class="text-left">
                <h1 class="display-6">Please Fill in the Fault Details</h1>
            </div>
            @if (optionslist.Count() > 1)
            {
                <div class="float-child">
                    <strong><label>Phone Incident Type</label><br /></strong>
                    <label>@Html.CheckBox("bellnotring", new{@class="phoneCheckbox"})&nbsp;Bell not ringing</label>
                    <label>@Html.CheckBox("contdialtone", new{@class="phoneCheckbox"})&nbsp;Continuois dial tone</label><br />
                    <label>@Html.CheckBox("crossedlines", new{@class="phoneCheckbox"})&nbsp;Crossed lines</label>&nbsp;&nbsp;&nbsp;&nbsp;
                    <label>@Html.CheckBox("cutsoff", new{@class="phoneCheckbox"})&nbsp;Cuts off</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
                    <label>@Html.CheckBox("nodialtone", new{@class="phoneCheckbox"})&nbsp;No dial tone</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <label>@Html.CheckBox("noisy", new{@class="phoneCheckbox"})&nbsp;Noisy line</label><br />
                    <label>@Html.CheckBox("damage", new{@class="phoneCheckbox"})&nbsp;Damage</label><br />
                </div>

                <div class="float-child">
                    <strong><label>BB Incident Type</label><br /></strong>
                    <label>@Html.CheckBox("intermittent", new{@class="bbCheckbox"})&nbsp;Intermittent conection</label>
                    <label>@Html.CheckBox("earlylife", new{@class="bbCheckbox"})&nbsp;Early life failure</label>
                    <label>@Html.CheckBox("broadbandfault", new{@class="bbCheckbox"})&nbsp;Broadband Fault</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <label>@Html.CheckBox("landlinefault", new{@class="bbCheckbox"})&nbsp;Landline fault</label>
                    <label>@Html.CheckBox("firmware", new{@class="bbCheckbox"})&nbsp;Firmware upgraded</label><br />
                    <label>@Html.CheckBox("webpages", new{@class="bbCheckbox"})&nbsp;No web pages loading</label><br />
                </div>
            }
            else
            {
                @if (options.Contains("Client") == true)
                {
                    <div class="float-child-alone">
                        <strong><label>Phone Incident Type</label><br /></strong>
                        <label>@Html.CheckBox("bellnotring", new{@class="phoneCheckbox"})&nbsp;Bell not ringing</label>
                        <label>@Html.CheckBox("contdialtone", new{@class="phoneCheckbox"})&nbsp;Continuois dial tone</label><br />
                        <label>@Html.CheckBox("crossedlines", new{@class="phoneCheckbox"})&nbsp;Crossed lines</label>&nbsp;&nbsp;&nbsp;&nbsp;
                        <label>@Html.CheckBox("cutsoff", new{@class="phoneCheckbox"})&nbsp;Cuts off</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
                        <label>@Html.CheckBox("nodialtone", new{@class="phoneCheckbox"})&nbsp;No dial tone</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        <label>@Html.CheckBox("noisy", new{@class="phoneCheckbox"})&nbsp;Noisy line</label><br />
                        <label>@Html.CheckBox("damage", new{@class="phoneCheckbox"})&nbsp;Damage</label><br />
                    </div>
                }
                @if (options.Contains("Broadband") == true)
                {
                    <div class="float-child-alone">
                        <strong><label>BB Incident Type</label><br /></strong>
                        <label>@Html.CheckBox("intermittent", new{@class="bbCheckbox"})&nbsp;Intermittent conection</label>
                        <label>@Html.CheckBox("earlylife", new{@class="bbCheckbox"})&nbsp;Early life failure</label>
                        <label>@Html.CheckBox("broadbandfault", new{@class="bbCheckbox"})&nbsp;Broadband Fault</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        <label>@Html.CheckBox("landlinefault", new{@class="bbCheckbox"})&nbsp;Landline fault</label>
                        <label>@Html.CheckBox("firmware", new{@class="bbCheckbox"})&nbsp;Firmware upgraded</label><br />
                        <label>@Html.CheckBox("webpages", new{@class="bbCheckbox"})&nbsp;No web pages loading</label><br />
                    </div>
                }
            }
        </div>
    </div>
    <p>
        <div id="errorSelectionContainer">
            <div class="othererrorsq">
                <label class="othererrorsql">Other</label>
            </div>
            <div class="othererrorsqcheckbox">
                <label name="otherErrors">Yes @Html.RadioButton("otherErrors", "yes", new {id="otherErrorExist", @onchange="yesSelected()"})</label>
                <label name="otherErrors">No @Html.RadioButton("otherErrors", "no", new {id="otherErrorNo", @onchange="noSelected()"})</label>
            </div>
        </div>
    </p>
    <div class="errordetails" id="errorDetailsLabel" style="display:none;">
        <label for="errordescription">Write some details for your fault below</label>

        <div class="form-group" id="errorDetailsBox" style="display:none;">
            @Html.TextArea("errordescription", htmlAttributes:new{id = "errordescription", onkeyup="countChars(this);", cols="70", rows="7"})
        </div>
    </div>
    <p id="characterLimit"></p>
    <div style="display:none;" id="limitAlert" role="alert">
        <p style="color:red;">The character limit for the description is 250, Please do not go over it</p>
    </div>
    <div style="display:none;" id="noOptionSelected" role="alert">
        <p style="color:red;">Please select one of the options before proceeding</p>
    </div>
    <div style="display:none;" id="noFaultSelected" role="alert">
        <p style="color:red;">Please select at least one fault before proceeding</p>
    </div>
    <div class="buttons">

        <button type="submit" name="Cancel" class="btn btn-secondary" value="Back" onclick="location.href='@Url.Action("ErrorForm1","ErrorForm")';return false;''">Back</button>
        <button type="submit" class="btn btn-info" name="Next">Next</button>
    </div>

}

<script type="text/javascript">
    function yesSelected() {
        if (document.getElementById("otherErrorExist").checked) {
            document.getElementById("errorDetailsBox").style.display = 'block';
            document.getElementById("errorDetailsLabel").style.display = 'block';
            document.getElementById("characterLimit").style.display = 'block';
        }
    }

    function noSelected() {
        if (document.getElementById("otherErrorNo").checked) {
            document.getElementById("errorDetailsBox").style.display = 'none';
            document.getElementById("errorDetailsLabel").style.display = 'none';
            document.getElementById("characterLimit").style.display = 'none';
            document.getElementById("errordescription").required = false;
        }
    }
    function countChars(obj) {
        document.getElementById("characterLimit").innerHTML = obj.value.length + ' /250 Characters';
        if (obj.value.length > 250) {
            document.getElementById("characterLimit").innerHTML = '<span style="color: red;">' + obj.value.length + ' out of the 250 characters limit</span>';
        }
    }

    function validateDescription() {
        if (document.getElementById("otherErrorExist").checked && document.getElementById("errordescription").value == "") {
            document.getElementById("errordescription").required = "required";
            return false;
        }
        if (document.getElementById("otherErrorExist").checked == false && document.getElementById("otherErrorNo").checked == false) {
            document.getElementById("noOptionSelected").style.display = 'block';
            document.getElementById("noOptionSelected").style.marginLeft = '38%';
            return false;
        }

        if (document.getElementById("errordescription").value.length > 250 && document.getElementById("otherErrorNo").checked) {
            return true;
        }
        else if (document.getElementById("errordescription").value.length > 250) {
            document.getElementById("limitAlert").style.display = 'block';
            return false;
        }

        if (document.getElementById("otherErrorNo").checked == true) {
            var phoneCheckboxes = document.getElementsByClassName('phoneCheckbox');
            var bbCheckboxes = document.getElementsByClassName('bbCheckbox');
            for (var i = 0; i < phoneCheckboxes.length; i++) {
                if (phoneCheckboxes[i].checked) {
                    return true;
                }
            }
            for (var i = 0; i < bbCheckboxes.length; i++) {
                if (bbCheckboxes[i].checked) {
                    return true;
                }
            }
            document.getElementById("noFaultSelected").style.display = 'block';
            document.getElementById("noFaultSelected").style.marginLeft = '38%';
            return false;
        }
        else {
            return true;
        }
    }
</script>